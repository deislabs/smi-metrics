// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mesh "github.com/servicemeshinterface/smi-metrics/pkg/mesh"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1alpha1 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/metrics/v1alpha2"
)

// Mesh is an autogenerated mock type for the Mesh type
type Mesh struct {
	mock.Mock
}

// GetEdgeMetrics provides a mock function with given fields: ctx, query, interval, details
func (_m *Mesh) GetEdgeMetrics(ctx context.Context, query mesh.Query, interval *v1alpha1.Interval, details *mesh.ResourceDetails) (*v1alpha1.TrafficMetricsList, error) {
	ret := _m.Called(ctx, query, interval, details)

	var r0 *v1alpha1.TrafficMetricsList
	if rf, ok := ret.Get(0).(func(context.Context, mesh.Query, *v1alpha1.Interval, *mesh.ResourceDetails) *v1alpha1.TrafficMetricsList); ok {
		r0 = rf(ctx, query, interval, details)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.TrafficMetricsList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, mesh.Query, *v1alpha1.Interval, *mesh.ResourceDetails) error); ok {
		r1 = rf(ctx, query, interval, details)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceMetrics provides a mock function with given fields: ctx, query, interval
func (_m *Mesh) GetResourceMetrics(ctx context.Context, query mesh.Query, interval *v1alpha1.Interval) (*v1alpha1.TrafficMetricsList, error) {
	ret := _m.Called(ctx, query, interval)

	var r0 *v1alpha1.TrafficMetricsList
	if rf, ok := ret.Get(0).(func(context.Context, mesh.Query, *v1alpha1.Interval) *v1alpha1.TrafficMetricsList); ok {
		r0 = rf(ctx, query, interval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.TrafficMetricsList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, mesh.Query, *v1alpha1.Interval) error); ok {
		r1 = rf(ctx, query, interval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSupportedResources provides a mock function with given fields: ctx
func (_m *Mesh) GetSupportedResources(ctx context.Context) (*v1.APIResourceList, error) {
	ret := _m.Called(ctx)

	var r0 *v1.APIResourceList
	if rf, ok := ret.Get(0).(func(context.Context) *v1.APIResourceList); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.APIResourceList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
